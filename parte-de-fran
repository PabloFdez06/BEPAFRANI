# Práctica 2.2

## 2.1 Instalación de entornos de desarrollo, propietarios y libres (CE 2.a)

Elige dos entornos de desarrollo: Instala ambos en tu equipo y captura pantallas del proceso de instalación.

En mi caso, he elegido los IDEs Visual Studio Code y IntelliJ IDEA.

### Proceso de instalación:

**Visual Studio Code:**  
![Visual Studio Code - Imagen 1](./path/to/image1.png)  
![Visual Studio Code - Imagen 2](./path/to/image2.png)  
![Visual Studio Code - Imagen 3](./path/to/image3.png)  
![Visual Studio Code - Imagen 4](./path/to/image4.png)  
![Visual Studio Code - Imagen 5](./path/to/image5.png)  
![Visual Studio Code - Imagen 6](./path/to/image6.png)  
![Visual Studio Code - Imagen 7](./path/to/image7.png)  

**IntelliJ IDEA:**  
![IntelliJ IDEA - Imagen 1](./path/to/image8.png)  
![IntelliJ IDEA - Imagen 2](./path/to/image9.png)  
![IntelliJ IDEA - Imagen 3](./path/to/image10.png)  
![IntelliJ IDEA - Imagen 4](./path/to/image11.png)  
![IntelliJ IDEA - Imagen 5](./path/to/image12.png)  

### Preguntas evaluativas:

- **¿Qué diferencias encontraste en el proceso de instalación entre el IDE propietario y el libre?**

  Durante el proceso de instalación de ambos IDEs no he encontrado grandes diferencias. Sin embargo, en el proceso de descarga, sí hubo una diferencia. En el caso de Visual Studio Code, solo fue necesario entrar en la página de descarga [https://code.visualstudio.com/](https://code.visualstudio.com/) y presionar el botón de descarga para obtener el ejecutable.

  Por otro lado, para IntelliJ IDEA, fue necesario crear una cuenta en la web de JetBrains usando mi correo electrónico institucional (@g.educaand.es), con lo cual obtuve una licencia temporal de un año. Luego, el proceso continuó de forma similar a Visual Studio Code: descarga del ejecutable e instalación.

- **¿Qué ventajas identificaste en cada uno de los entornos durante la instalación?**

  Ambas instalaciones han sido prácticamente idénticas, más allá de la parte de registro, que es necesario en los IDEs de JetBrains como IntelliJ IDEA. Además, si no se dispone de una licencia de estudiante, sería necesario obtener una licencia de pago.

**Evidencia:** Captura de pantalla del proceso de instalación de cada IDE (ver capturas en Proceso de instalación).

## 2.2 Gestión de módulos y extensiones en el entorno de desarrollo

En cada IDE, agrega extensiones o módulos que amplíen su funcionalidad. Por ejemplo, al trabajar con Visual Studio Code e IntelliJ IDEA, instala una extensión para trabajar con Python en Visual Studio Code o un plugin para Kotlin en IntelliJ IDEA.

### Proceso de instalación de extensiones/plugins:

**Visual Studio Code:**  
![Visual Studio Code - Extensiones](./path/to/vscode_extension_image.png)  

**IntelliJ IDEA:**  
![IntelliJ IDEA - Plugins](./path/to/intellij_plugin_image.png)  

### Preguntas evaluativas:

- **¿Cómo fue el proceso de instalación de extensiones o módulos en cada IDE?**

  Mientras que Visual Studio Code tiene un apartado en el navegador lateral, junto a los iconos de Explorador, Buscar y Control de versiones, entre otros, que hace la instalación de extensiones especialmente intuitiva y fácil, en IntelliJ IDEA el proceso es un poco más complejo. El menú de plugins (como se llama en este caso) no está en la pantalla principal del programa, sino en el menú de opciones, al que se accede desde `File → Settings`.

- **¿Qué beneficios proporcionan las extensiones o plugins que instalaste para el desarrollo de tus proyectos?**

  Instalar plugins o extensiones en los IDE proporciona características adicionales que facilitan el desarrollo, como funciones de autocompletado y sugerencias de código, depuración (permitiendo ejecutar el código paso a paso y analizar variables en tiempo real), testing (como pytest) y control de versiones. Estas herramientas aumentan la productividad al optimizar y simplificar tareas de desarrollo.

**Evidencia:** Captura de pantalla del panel de extensiones o plugins instalados en cada IDE.

## 2.3 Personalización y automatización del entorno

Personaliza el entorno de trabajo en cada IDE (tema, atajos de teclado) y automatiza una tarea, como la ejecución de pruebas o la compilación de código.

### Preguntas evaluativas:

- **¿Qué aspectos del entorno personalizaste y cómo mejoró tu experiencia de desarrollo?**

  En **Visual Studio Code**, he modificado el tema de la interfaz, eligiendo un tono más oscuro desde `File → Preferences → Theme`. Esto reduce la fatiga visual causada por largas sesiones frente a la pantalla.  
  En **IntelliJ IDEA**, configuré un atajo para duplicar líneas completas en `Settings → Keymap`. Utilizar atajos de teclado reduce la necesidad de cambiar entre teclado y ratón, facilitando un flujo de trabajo más rápido y consistente, especialmente al trabajar con varios IDEs.

  **En Visual Studio Code:**  
  ![Tema oscuro en VS Code](./path/to/vscode_theme_image.png)

  **En IntelliJ IDEA:**  
  ![Atajo de teclado en IntelliJ IDEA](./path/to/intellij_keymap_image.png)

- **¿Cómo configuraste la automatización de tareas y en qué te benefició durante el trabajo?**

  En **Visual Studio Code**, configuré tareas a través de `Terminal → Configure Tasks → Create tasks.json from template`. Para automatizar la ejecución de pruebas con `pytest`, edité el archivo `tasks.json` de la siguiente manera:

  ```json
  {
    "version": "2.0.0",
    "tasks": [
      {
        "label": "run pytest",
        "type": "shell",
        "command": "pytest",
        "group": {
          "kind": "test",
          "isDefault": true
        },
        "problemMatcher": [],
        "runOptions": {
          "runOn": "fileSave"   // Ejecuta al guardar
        }
      }
    ]
  }

## 2.4 Configuración del sistema de actualización del entorno de desarrollo

Configura el sistema de actualizaciones automáticas o manuales en ambos IDEs para asegurarte de que están al día con las últimas versiones y mejoras.

### Preguntas evaluativas:

- **¿Cómo configuraste las actualizaciones automáticas en cada IDE?**

  En **Visual Studio Code**, la gestión de actualizaciones se configura desde `File → Preferences → Settings` y buscando “update” en la barra de búsqueda. Las opciones de actualización pueden establecerse en los modos: **None**, **Manual**, **Start** y **Default**.

  ![Configuración de actualizaciones en VS Code](./path/to/vscode_update_image.png)

  En **IntelliJ IDEA**, el sistema de actualización es similar, y se accede a través de `File → Settings → System Setting → Updates`.

  ![Configuración de actualizaciones en IntelliJ IDEA](./path/to/intellij_update_image.png)

- **¿Por qué es importante mantener el IDE actualizado en proyectos de desarrollo?**

  Mantener el IDE actualizado permite aprovechar las mejoras en rendimiento, nuevas características, compatibilidad con las últimas tecnologías, corrección de errores, y la seguridad del entorno. En general, garantiza una mejor experiencia de desarrollo.

**Evidencia:** Captura de pantalla de la configuración de actualizaciones en cada IDE.

## 2.5 Generación de ejecutables a partir de código fuente en distintos lenguajes en un mismo IDE

Escribe un programa que cuente de 10 a 0 y luego imprima "¡Despegue!". Usa un solo IDE para generar y ejecutar este programa en dos lenguajes diferentes (por ejemplo, Java y Kotlin en IntelliJ IDEA).

### Preguntas evaluativas:

- **¿Cuál fue el proceso para ejecutar el mismo programa en diferentes lenguajes dentro del mismo IDE?**

  - **Java en IntelliJ IDEA:**
    Para ejecutar el programa en Java dentro de IntelliJ IDEA, primero creé un proyecto de tipo Java y añadí un archivo de clase llamado `Countdown.java`. Escribí el código en Java para contar de 10 a 0 usando un bucle `for`. Verifiqué que el proyecto tuviera un JDK configurado correctamente. Luego, hice clic derecho en el archivo y seleccioné `Run Countdown.main()` para ejecutar el programa.

    ![Ejecución en Java](./path/to/java_execution_image.png)

  - **Kotlin en IntelliJ IDEA:**
    Para ejecutar el mismo programa en Kotlin, creé un archivo nuevo llamado `Countdown.kt` dentro del mismo proyecto en IntelliJ IDEA. Escribí el código en Kotlin utilizando la función `downTo` para contar de 10 a 0. Verifiqué que el proyecto soportara Kotlin. Luego, hice clic derecho sobre el archivo y seleccioné `Run Countdown.main()`. El resultado fue el mismo que en Java, pero ahora usando Kotlin.

    ![Ejecución en Kotlin](./path/to/kotlin_execution_image.png)

- **¿Qué diferencias encontraste en la generación del ejecutable entre los dos lenguajes?**

  La diferencia principal al generar el ejecutable entre Java y Kotlin es que, aunque ambos lenguajes terminan en un formato que puede ser ejecutado por la JVM (Java Virtual Machine), el proceso tiene algunas diferencias. En Java, el código se compila en archivos `.class`, que luego se ejecutan. En Kotlin, el proceso es más directo en IntelliJ IDEA, ya que el código se compila automáticamente para su ejecución. Ambos lenguajes requieren la JVM, por lo que, en la práctica, el resultado final es bastante similar.

**Evidencia:** Captura de pantalla mostrando la ejecución del programa en ambos lenguajes dentro del mismo IDE.

---

## 2.6 Generación de ejecutables con diferentes IDEs a partir del mismo código fuente

Escribe un programa en Python que cuente de 10 a 0 y luego imprima "¡Despegue!". Ejecuta el programa en los IDEs seleccionados.

- **En Visual Studio Code:**
  
  ![Ejecución en Visual Studio Code](./path/to/vscode_execution_image.png)

- **En IntelliJ IDEA:**
  
  ![Ejecución en IntelliJ IDEA](./path/to/intellij_execution_image.png)

### Preguntas evaluativas:

- **¿Qué diferencias encontraste al ejecutar el mismo código fuente en diferentes IDEs?**

  El proceso fue bastante similar en ambos entornos. Ambos IDEs requieren configurar el intérprete de Python y permiten ejecutar el código con pocos clics. La principal diferencia es que IntelliJ IDEA tiene una interfaz más completa y estructurada, mientras que VS Code es más ligero y rápido de configurar. Sin embargo, ambos ofrecen una experiencia similar para ejecutar programas pequeños.

- **¿Cuál de los IDEs te pareció más cómodo o eficiente para ejecutar el código Python o el lenguaje que hayas elegido? ¿Por qué?**

  Prefiero **Visual Studio Code**. A pesar de que IntelliJ IDEA es un IDE más completo y potente, es también más complejo de configurar. Aunque ambas interfaces son similares, Visual Studio Code muestra de forma explícita cada elemento en el panel lateral, sin necesidad de abrir menús adicionales. Esto hace que, para alguien que se está introduciendo en la programación, sea más intuitivo y fácil de usar.

**Evidencia:** Captura de pantalla mostrando la ejecución del programa en ambos IDEs.
